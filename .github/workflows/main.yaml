name: Django                                  # workflow name

on:
  push:
    branches:                                 # similar to "only" in GitLab
      - main

jobs:
  secret_scanning:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - run: docker run --rm -v $(pwd):/src hysnsec/trufflehog file:///src --json > trufflehog-output.json
        continue-on-error: true             # allow the build to fail, similar to "allow_failure: true" in GitLab

      - uses: actions/upload-artifact@v2
        with:
          name: TruffleHog
          path: trufflehog-output.json
        if: always()                        # what is this for?
  
  build:
    runs-on: ubuntu-20.04   # similar to "image" in GitLab
    needs: secret_scanning
    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - run: |
          pip3 install --upgrade virtualenv
          virtualenv env
          source env/bin/activate
          pip install -r requirements.txt
          python manage.py check
  
  code-quality:
    name: SonarCloud
    needs: build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=Django 

  test:
    runs-on: ubuntu-20.04
    needs: code-quality
    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - run: |
          pip3 install --upgrade virtualenv
          virtualenv env
          source env/bin/activate
          pip install -r requirements.txt
          python manage.py test taskManager

  oast:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2

      - run: docker run --rm -v $(pwd):/src hysnsec/safety check -r requirements.txt --json | tee oast-results.json
        continue-on-error: true             # allow the build to fail, similar to "allow_failure: true" in GitLab

      - uses: actions/upload-artifact@v2
        with:
          name: Safety
          path: oast-results.json
        if: always()                        # what is this for?
        
  oast-frontend:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '10.x'

      - run: npm install

      - run: docker run --rm -v $(pwd):/src -w /src hysnsec/retire --outputformat json --outputpath retirejs-report.json --severity high
        continue-on-error: true

      - uses: actions/upload-artifact@v2
        with:
          name: RetireJS
          path: retirejs-report.json
        if: always()                        # what is this for?
  
  sast:
    runs-on: ubuntu-20.04
    needs: [oast,oast-frontend, oast-snyk]     
    steps:
      - uses: actions/checkout@v2

      - run: docker run --rm -v $(pwd):/src hysnsec/bandit -r /src -f json -o /src/bandit-output.json
        continue-on-error: true             # allow the build to fail, similar to allow_failure: true

      - uses: actions/upload-artifact@v2
        with:
          name: Bandit
          path: bandit-output.json
        if: always()                        # what is this for?
      - uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - run: python3 devsecops/upload-results.py --host ${{ secrets.DOJO_HOST }} --api_key ${{ secrets.DOJO_API_TOKEN }} --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file bandit-output.json --scanner "Bandit Scan"       
  oast-snyk:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@master      
      - uses: snyk/actions/setup@master
      - uses: actions/setup-go@v1
        with:
          go-version: "1.13"

      - uses: actions/setup-node@v2
        with:
          node-version: '10.x'

      - name: Install Node modules
        run: npm install

      - name: Run Snyk
        continue-on-error: true
        run: snyk test --json > snyk-results.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - uses: actions/upload-artifact@v2
        with:
          name: Snyk               
          path: snyk-results.json
        if: always()        # what is this for?
  zap_action_baseline:
    name: dast
    runs-on: ubuntu-20.04
    needs: sast
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

        # Once the pipeline is complete, you can click the Issues tab in your repository, and you will notice that there is 1 issue open.         # The open issue is a result of embedding ZAP through the action zaproxy/action-baseline@v0.4.0, and the issue is created automatically by github-actions bot

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable:2.10.0'
          target: ${{ secrets.PROD_URL }}
        continue-on-error: true
  
  zap_docker_baseline:
    name: dast-docker
    runs-on: ubuntu-20.04
    needs: sast
    steps:
      - run: |
           docker pull owasp/zap2docker-stable:2.10.0
           docker run --user root --rm -v $(pwd):/zap/wrk:rw -w /zap owasp/zap2docker-stable:2.10.0 zap-baseline.py -t ${{ secrets.PROD_URL }} -J zap-output.json
        continue-on-error: true
      - uses: actions/upload-artifact@v2
        with:
          name: ZAP Scan
          path: zap-output.json
        if: always()        # what is this for?
        
  integration:
    runs-on: ubuntu-20.04
    needs: [zap_action_baseline, zap_docker_baseline] 
    steps:
      - run: echo "This is an integration step"
      - run: exit 1
        continue-on-error: true
        if: always() 
  prod:
    runs-on: ubuntu-20.04
    needs: integration
    steps:
      - run: echo "This is a deploy step."
